# Study 1.
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds"))
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds"))
summarized_results <- summarize_results(simulatr_specifier = sim_spec, raw_result_df = sim_res, metrics = c("coverage", "bias"))
sim_spec@parameter_grid
summarize_results
A
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
library(cowplot)
library(tidyverse)
library(simulatr)
# Study 1.
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds"))
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds"))
sim_res$parameter
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"), parameters = c("m_perturbation"))
arms <- c("pi", "m_perturbation", "g_perturbation")
metric <- "bias"
summarized_results
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"), parameters = c("m_perturbation", "m_intercept"))
summarized_results
colnames(summarized_results)
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE)
arms
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
metric
parameter
parameter <- "m_intercept"
summarized_results <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
arm
arm
arms
arm <- arms[1]
arm
gsub(pattern = "^arm_", replacement = "", x = arm)
arm_name <- gsub(pattern = "^arm_", replacement = "", x = arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
p_out
arm_name
arm
param_name <- gsub(pattern = "^arm_", replacement = "", x = arm)
param_name
other_arms <- arms[ !(arms == arm) ]
other_arms
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title
arms
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
arms
summarized_results <- dplyr::filter(summarized_results, parameter == !!parameter)
arm_name <- paste0("arm_", arm)
arm_name
arms
arm <- arms[1]
arm
arm_name <- paste0("arm_", arm)
arm_name
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
other_arms
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results, !!as.symbol(arm_name) & metric == !!metric)
to_plot
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
p_out
View(p_out)
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
library(cowplot)
library(tidyverse)
library(simulatr)
get_arm_plots <- function(summarized_results, parameter, metric) {
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
summarized_results <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
n_ps <- length(ps)
vert_plot <- plot_grid(plotlist = lapply(ps, function(i) i$plot) ,
align = "v", axis = "l", nrow = n_ps, labels = letters[1:n_ps])
out <- plot_grid(vert_plot, ps[[1]]$legend, ncol = 1, rel_heights = c(1, .1))
return(out)
}
# Study 1.
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds"))
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds"))
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"), parameters = c("m_perturbation", "m_intercept"))
get_arm_plots(summarized_results = summarized_results, parameter = "m_perturbation", )
get_arm_plots(summarized_results = summarized_results, parameter = "m_perturbation", metric = "bias")
get_arm_plots(summarized_results = summarized_results, parameter = "m_perturbation", metric = "coverage")
get_arm_plots(summarized_results = summarized_results, parameter = "pi", metric = "coverage")
get_arm_plots(summarized_results = summarized_results, parameter = "pi", metric = "coverage")
get_arm_plots(summarized_results = summarized_results, parameter = "m_intercept", metric = "coverage")
get_arm_plots(summarized_results = summarized_results, parameter = "m_intercept", metric = "bias")
summarized_results
parameter
metric
parameter <- "pi"
metric <- "bias"
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
arms
summarized_results <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
arms
arm <- "pi"
arm
arm_name <- paste0("arm_", arm)
arm_name
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
title
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
other_arms
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
arm_name
other_arms <- arms[ !(arms == arm) ]
other_arms
other_arms
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results[[other_arm]][1]))
title
summarized_results
parameter
summarized_results
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"), parameters = c("m_perturbation", "m_intercept"))
summarized_results <- dplyr::filter(summarized_results, parameter == !!parameter)
summarized_results
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"), parameters = c("m_perturbation", "m_intercept"))
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"), parameters = c("m_perturbation", "m_intercept"))
summarized_results
summarized_results$parameter
summarized_resultsparameter
parameter
summarized_results
summarized_results_sub <- dplyr::filter(summarized_results, parameter == !!parameter)
arms
arm
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
arm_name
other_arms
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results_sub[[other_arm]][1]))
title
summarized_results_sub
summarized_results
summarized_results$parameter
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
library(cowplot)
library(tidyverse)
library(simulatr)
get_arm_plots <- function(summarized_results, parameter, metric) {
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
summarized_results_sub <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results_sub[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results_sub, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
n_ps <- length(ps)
vert_plot <- plot_grid(plotlist = lapply(ps, function(i) i$plot),
align = "v", axis = "l", nrow = n_ps, labels = letters[1:n_ps])
out <- plot_grid(vert_plot, ps[[1]]$legend, ncol = 1, rel_heights = c(1, .1))
return(out)
}
# Study 1.
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds"))
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds"))
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"),
parameters = c("m_perturbation", "m_intercept", "pi"))
get_arm_plots(summarized_results = summarized_results, parameter = "pi", metric = "bias")
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
library(cowplot)
library(tidyverse)
library(simulatr)
get_arm_plots <- function(summarized_results, parameter, metric) {
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
summarized_results_sub <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results_sub[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results_sub, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
n_ps <- length(ps)
vert_plot <- plot_grid(plotlist = lapply(ps, function(i) i$plot),
align = "v", axis = "l", nrow = n_ps, labels = letters[1:n_ps])
out <- plot_grid(vert_plot, ps[[1]]$legend, ncol = 1, rel_heights = c(1, .1))
return(out)
}
get_arm_plots(summarized_results = summarized_results, parameter = "pi", metric = "bias")
get_arm_plots(summarized_results = summarized_results, parameter = "m_perturbation", metric = "bias")
get_arm_plots <- function(summarized_results, parameter, metric) {
my_cols <- c("darkred", "darkblue")
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
summarized_results_sub <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results_sub[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results_sub, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title) + scale_fill_manual(my_cols)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
n_ps <- length(ps)
vert_plot <- plot_grid(plotlist = lapply(ps, function(i) i$plot),
align = "v", axis = "l", nrow = n_ps, labels = letters[1:n_ps])
out <- plot_grid(vert_plot, ps[[1]]$legend, ncol = 1, rel_heights = c(1, .1))
return(out)
}
get_arm_plots(summarized_results = summarized_results, parameter = "m_perturbation", metric = "bias")
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
library(cowplot)
library(tidyverse)
library(simulatr)
get_arm_plots <- function(summarized_results, parameter, metric) {
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
summarized_results_sub <- dplyr::filter(summarized_results, parameter == !!parameter)
ps <- lapply(arms, function(arm) {
arm_name <- paste0("arm_", arm)
other_arms <- arms[ !(arms == arm) ]
title <- sapply(other_arms, function(other_arm) paste0(other_arm, " = ", summarized_results_sub[[other_arm]][1]))
title <- paste0(paste0(title, collapse = ", "))
to_plot <- filter(summarized_results_sub, !!as.symbol(arm_name) & metric == !!metric)
p <- ggplot(to_plot, aes(x = !!as.symbol(arm), y = value, col = method)) + geom_point() + geom_line() + ylab(metric) + geom_errorbar(aes(ymin = lower_mc_ci, ymax = upper_mc_ci, width = I(0.03))) + theme_bw() + theme(plot.title = element_text(size = 11, hjust = 0.5)) + ggtitle(title)
l <- get_legend(p + theme(legend.position = "bottom"))
p_out <- p + theme(legend.position = "none")
return(list(plot = p_out, legend = l))
})
n_ps <- length(ps)
vert_plot <- plot_grid(plotlist = lapply(ps, function(i) i$plot),
align = "v", axis = "l", nrow = n_ps, labels = letters[1:n_ps])
out <- plot_grid(vert_plot, ps[[1]]$legend, ncol = 1, rel_heights = c(1, .1))
return(out)
}
# Study 1.
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds"))
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds"))
summarized_results <- summarize_results(sim_spec = sim_spec, sim_res = sim_res, metrics = c("coverage", "bias"),
parameters = c("m_perturbation", "m_intercept", "pi"))
get_arm_plots(summarized_results = summarized_results, parameter = "m_perturbation", metric = "bias")
library(simulatr)
plot_all_arms
library(simulatr)
plot_all_arms
knitr::opts_chunk$set(echo = TRUE)
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds"))
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds"))
sim_spec
sim_spec@parameter_grid
sim_spec@parameter_grid
sim_spec@fixed_parameters
library(magrittr)
sim_spec@parameter_grid %>% head()
sim_spec@parameter_grid %>% head()
sim_spec@fixed_parameters %>% head()
summarized_results <- summarize_results(sim_spec = sim_spec,
sim_res = sim_res,
metrics = c("coverage", "bias"),
parameters = c("m_perturbation", "pi"))
summarized_results
plot_all_arms(summarized_results = summarized_results,
parameter = "bias",
metric = "m_perturbation")
summarized_results
plot_all_arms(summarized_results = summarized_results,
parameter = "bias",
metric = "pi")
plot_all_arms(summarized_results = summarized_results,
parameter = "bias",
metric = "m_perturbation")
plot_all_arms
summarized_results = summarized_results;
parameter = "bias";
metric = "m_perturbation"
summarized_results
parameter
arms <- grep(pattern = "^arm_", x = colnames(summarized_results), value = TRUE) %>% gsub(pattern = "^arm_", replacement = "", x = .)
arms
summarized_results_sub <- dplyr::filter(summarized_results, parameter == !!parameter)
summarized_results_sub
parameter
summarized_results
plot_all_arms(summarized_results = summarized_results,
metric = "bias",
parameter = "m_perturbation")
plot_all_arms(summarized_results = summarized_results,
metric = "bias",
parameter = "pi")
plot_all_arms(summarized_results = summarized_results,
metric = "coverage",
parameter = "pi")
plot_all_arms(summarized_results = summarized_results,
metric = "coverage",
parameter = "m_perturbation")
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds")) # simulatr specifier object
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds")) # raw results
sim_res
require(dplyr)
sim_res
a <- filter(sim_res, run_id == 1,
method == "em",
target %in% c("confint_lower", "confint_higher"))
a
nrow(a)
a <- filter(sim_res, run_id == 1,
method == "em",
target %in% c("confint_lower", "confint_higher"),
parameter == m_perturbation)
a <- filter(sim_res, run_id == 1,
method == "em",
target %in% c("confint_lower", "confint_higher"),
parameter == "m_perturbation")
a
nrow(a)
a <- filter(sim_res, run_id == 1,
method == "em",
target == "estimate",
parameter == "m_perturbation")
a
nrow(a)
a <- filter(sim_res, run_id == 2,
method == "em",
target == "estimate",
parameter == "m_perturbation")
nrow(a)
a <- filter(sim_res, run_id == 10,
method == "em",
target == "estimate",
parameter == "m_perturbation")
nrow(a)
nrow(sim_ers)
nrow(sim_res)
a <- filter(sim_res, run_id == 10,
method == "em" &
target == "estimate" &
parameter == "m_perturbation")
a
nrow(a)
a <- filter(sim_res, run_id == 1,
method == "em" &
target == "estimate" &
parameter == "m_perturbation")
a
a <- filter(sim_res, run_id == 20,
method == "em" &
target == "estimate" &
parameter == "m_perturbation")
nrow(a)
a <- filter(sim_res, run_id == 30,
method == "em" &
target == "estimate" &
parameter == "m_perturbation")
nrow(a)
filter
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds")) # raw results
nrow(sim_res)
a <- filter(x, method == "em", parameter == "m_perturbation", target == "estimate", grid_row_id == 1)
a <- filter(sim_res, method == "em", parameter == "m_perturbation", target == "estimate", grid_row_id == 1)
nrow(a)
a
a <- filter(sim_res,
run_id == 1,
method == "em" &
target == "estimate" &
parameter == "m_perturbation")
nrow(a)
a <- filter(sim_res,
grid_row_id == 1,
method == "em" &
target == "estimate" &
parameter == "m_perturbation")
a
a
nrow(a)
sim_res
a <- filter(sim_res,
grid_row_id == 1,
method == "em" &
target %in% c("confint_lower", "confint_higher") &
parameter == "m_perturbation")
a
filter(a, target == "confint_lower")
filter(a, target == "confint_lower") %>% summarize( mean_lower_ci = mean(value) )
filter(a, target == "confint_lower") %>% summarize(mean_lower_ci = mean(value),
frac_lt_gt = mean(value < -2))
filter(a, target == "confint_lower") %>% summarize(mean_lower_ci = mean(value),
frac_greater_than_gt = mean(value > -2))
filter(a, target == "confint_higher") %>% summarize(mean_upper_ci = mean(value),
frac_lessthan_gt = mean(value < -2))
a
a$id %>% unique()
a$id %>% unique() %>% length()
a
dplyr::group_by(a, id)
dplyr::group_by(a, id) %>% mutate(ci_lower = value[target == "confint_lower"],
ci_upper = value[target == "confint_upper"])
a
filter(a, target == "confint_lower") %>% summarize(mean_lower_ci = mean(value),
frac_greater_than_gt = mean(value > -2))
filter(a, target == "confint_higher") %>% summarize(mean_upper_ci = mean(value),
frac_lessthan_gt = mean(value < -2))
dplyr::group_by(a, id) %>% summarize( value )
dplyr::group_by(a, id)
dplyr::group_by(a, id) %>% dplyr::group_map(.f = function(tbl, key))
dplyr::group_by(a, id)
dplyr::group_by(a, id) %>% dplyr::summarize( value[ target == "confint_lower" ] )
dplyr::group_by(a, id) %>% dplyr::summarize( # value[ target == "confint_lower" ]
value[ target == "confint_higher" ] )
dplyr::group_by(a, id) %>% dplyr::summarize( value[ target == "confint_lower" ] < -2 &
value[ target == "confint_higher" ] > -2)
dplyr::group_by(a, id) %>% dplyr::summarize(covered = value[ target == "confint_lower" ] < -2 &
value[ target == "confint_higher" ] > -2)
coverage <- dplyr::group_by(a, id) %>% dplyr::summarize(covered = value[ target == "confint_lower" ] < -2 &
value[ target == "confint_higher" ] > -2)
coverage
coverage$covered
coverage$covered %>% mean
coverage <- dplyr::group_by(a, id) %>% dplyr::summarize(covered = value[target == "confint_lower"] < -2,
value[target == "confint_higher"] > -2)
coverage
coverage <- dplyr::group_by(a, id) %>% dplyr::summarize(covered = (value[target == "confint_lower"] < -2 & value[target == "confint_higher"] > -2))
coverage
coverage$covered %>% mean
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
require(dplyr)
sim_dir <- paste0(.get_config_path("LOCAL_GLMEIV_DATA_DIR"), "private/simulations")
sim_spec <- readRDS(paste0(sim_dir, "/sim_spec_1.rds")) # simulatr specifier object
sim_res <- readRDS(paste0(sim_dir, "/raw_result_1.rds")) # raw results
a <- filter(sim_res,
grid_row_id == 1,
method == "em" &
target %in% c("confint_lower", "confint_higher") &
parameter == "m_perturbation")
a
filter(a, target == "confint_lower") %>% summarize(mean_lower_ci = mean(value),
frac_greater_than_gt = mean(value > -2))
filter(a, target == "confint_higher") %>% summarize(mean_upper_ci = mean(value),
frac_lessthan_gt = mean(value < -2))
coverage <- dplyr::group_by(a, id) %>% dplyr::summarize(covered = (value[target == "confint_lower"] < -2 & value[target == "confint_higher"] > -2))
coverage
coverage_rate <- coverage %>% summarize(mean(covered)) %>% pullP()
coverage_rate <- coverage %>% summarize(mean(covered)) %>% pull()
coverage_rate
