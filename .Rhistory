ggtitle(paste0("Mean estimate and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5),
element_text(angle = 30, vjust = 0.5, hjust=1))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
theme(plot.title = element_text(hjust = 0.5),
element_text(angle = 30, vjust = 0.5, hjust=1))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("pi", results)
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean estimate and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability")
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("pi", results)
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean estimate and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("pi", results)
summary_plot_for_var("m_perturbation", results)
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean estimate and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("m_perturbation", results)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
variable <- m_perturbation"
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean estimate and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
variable <- "m_perturbation"
results <- results
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean estimate and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p1
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
theme(plot.title = element_text(hjust = 0.5))
p2
summary_plot_for_var("m_perturbation", results)
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("m_perturbation", results)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
library(dplyr)
library(tidyr)
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[ grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
if ("parm_id" %in% colnames(all_res)) all_res <- mutate(all_res, param_id = parm_id)
var_names <- filter(all_res, rep_id == "1-1-1") %>% pull(variable)
# load the ground truth
data_dir <- paste0(simulation_dir, "/data")
fs_load <- list.files(data_dir, full.names = TRUE)[grep(pattern = "ground_truth*", x = list.files(data_dir))]
all_gt <- lapply(fs_load, readRDS) %>% lapply(., function(gt) {
m <- t(matrix(c(gt$param_id, gt$pi, gt$m_coef, gt$g_coef, gt$n)))
row.names(m) <- NULL
colnames(m) <- c("param_id", var_names, "n")
return(m)
}) %>% do.call(what = rbind, args = .) %>% as.data.frame()
# a function to compute the coverage across all param_ids of a given variable
compute_statistics_for_variable <- function(variable, all_res, all_gt) {
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1]) %>%
select(variable, param_id, gt_value, everything())
return(out)
}
# finally, compute the statistics for each variable
varwise_stats <- lapply(var_names, function(variable)
compute_statistics_for_variable(variable, all_res, all_gt)) %>%
do.call(what = rbind, args = .)
varwise_stats_final <- left_join(x = varwise_stats, y = all_gt, by = "param_id")
variable <- "pi"
all_res
all_gt
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1]) %>%
select(variable, param_id, gt_value, everything())
pnorm(0.95)
pnorm(1 - 0.95)
pnorm(0.975)
qnorm(0.95)
qnorm(1 - 0.95/2)
qnorm(0.95)
qnorm(0.025)
qnorm(1 - 0.025)
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
head(gt_var)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
head(res_var)
nrow(res_var)
head(gt_var)
all_gt
list.files(data_dir)
param_grid <- readRDS(paste0(data_dir, "/parameter_df.rds"))
param_grid
# recall the number of reps per row and number of partitions
n_reps_per_row <- if (small_example) 5 else 500
small_example <- FALSE
# recall the number of reps per row and number of partitions
n_reps_per_row <- if (small_example) 5 else 500
n_reps_per_row
# recall the number of reps per row and number of partitions
n_reps_per_row <- if (small_example) 5 else 500
n_partitions <- 10
n_reps_total <- n_reps_per_row * n_partitions
n_reps_total
# a function to compute the coverage across all param_ids of a given variable
compute_statistics_for_variable <- function(variable, all_res, all_gt) {
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
n <-
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_reps_total),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_reps_total)) %>%
select(variable, param_id, gt_value, everything())
return(out)
}
# finally, compute the statistics for each variable
varwise_stats <- lapply(var_names, function(variable)
compute_statistics_for_variable(variable, all_res, all_gt)) %>%
do.call(what = rbind, args = .)
varwise_stats
varwise_stats$coverage_lower_ci
varwise_stats$coverage_upper_ci
# finally, compute the statistics for each variable
varwise_stats <- lapply(var_names, function(variable)
compute_statistics_for_variable(variable, all_res, all_gt)) %>%
do.call(what = rbind, args = .)
head(v)
head(varwise_stats)
varwise_stats_final <- left_join(x = varwise_stats, y = all_gt, by = "param_id")
# save result
saveRDS(object = varwise_stats_final, file = paste0(res_dir, "/combined_results.rds"))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("m_perturbation", results)
variable <- "m_perturbation"
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
theme(plot.title = element_text(hjust = 0.5))
p_2
p2
to_plot
to_plot$coverage_lower_ci
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p2
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
summary_plot_for_var("m_perturbation", results)
summary_plot_for_var("pi", results)
summary_plot_for_var("g_perturbation", results)
figure_dir <- paste0(simulation_dir, "/figures")
figure_dir
file.exists(figure_dir)
if (!dir.exists(figure_dir)) dir.create(figure_dir)
dir.exists(figure_dir)
results$variable %>% unique
unique(results$variable)
p <- summary_plot_for_var(variable, results)
f_name <- paste0(figure_dir, "/", variable, "_plot.pdf")
f_name
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 7, height = 6)
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 7, height = 4.5)
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 7.5, height = 4.5)
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
# create plot for each variable
for (variable in unique(results$variable)) {
p <- summary_plot_for_var(variable, results)
f_name <- paste0(figure_dir, "/", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
run_id <- if (is.na(args[2])) 1 else as.integer(args[2])
# Load required packages
library(magrittr)
library(glmeiv)
# set file paths and load parameter grid; sik results
drl <- c("data", "results", "logs")
data_results_logs <- setNames(paste0(simulation_dir, "/", drl), drl)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
# Load data, ground truth, and covariate matrix for current run_id
curr_row <- g[run_id,]
sink(file = paste0(data_results_logs[["logs"]], "/log_", curr_row$run_id, ".Rout"))
data <- readRDS(file = paste0(data_results_logs[["data"]], "/data_", curr_row$run_id, ".rds"))
ground_truth <- readRDS(file = paste0(data_results_logs[["data"]], "/ground_truth_", curr_row$param_id, ".rds"))
covariate_matrix <- readRDS(file = paste0(data_results_logs[["data"]], "/covariate_matrix_", curr_row$dataset_id, ".rds"))
covariate_matrix
closeAllConnections()
# run the em length(data) times
result_list <- lapply(X = seq(1, length(data)), FUN = function(i) {
print(paste0("Running rep ", i, " of ", length(data)))
curr_data <- data[[i]]
em_fit <- run_glmeiv_known_p(m = curr_data$m, g = curr_data$g,
m_fam = ground_truth$m_fam, g_fam = ground_truth$g_fam,
covariate_matrix = covariate_matrix, p = curr_data$p, n_runs = 5) %>%
dplyr::mutate(rep_id = paste0(curr_row$run_id, "-", i), param_id = curr_row$param_id)
return(em_fit)
})
result_list
# combine results into a data frame and save in results dir
result_df <- do.call(what = rbind, args = result_list)
saveRDS(result_df, paste0(data_results_logs[["results"]], "/result_", curr_row$run_id, ".rds"))
# close the sink
closeAllConnections()
run_glmeiv_known_p
library(glmeiv)
# Plot histograms
set.seed(4)
m_intercept <- c(0, 1, 2, 3)
m_slope <- -2
g_intercept <- -2
g_slope <- c(1, 2, 3, 4)
pi <- 0.25
covariate_matrix <- NULL
n <- 10000
m_intercept <- c(0, 1, 2, 3)
m_slope <- -2
g_intercept <- -2
g_slope <- c(1, 2, 3, 4)
pi <- 0.25
m_fam <- poisson()
g_fam <- poisson()
covariate_matrix <- NULL
n <- 10000
m_fam
g_fam
m_coef
m_coef <- c(m_intercept[i], m_slope)
i <- 1
m_coef <- c(m_intercept[i], m_slope)
m_coef
m_coef <- c(m_intercept[i], m_slope)
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
# Plot histograms
library(glmeiv)
m_coef <- c(m_intercept[i], m_slope)
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
dat
plot_count_distribution(dat, "mRNA")
p <- plot_count_distribution(dat, "mRNA")
p
i <- 2
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
p
i <- 3
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
p
library(ggplot2)
m_intercept[i]
paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept_", m_intercept[i])
paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept=", m_intercept[i]
paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept=", m_intercept[i])
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
m_coef <- c(m_intercept[1], m_slope)
g_coef <- c(g_intercept, g_slope[i])
g_coef
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
p <- plot_count_distribution(dat, "gRNA")
p
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
for (i in seq(1, length(m_intercept))) {
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
}
for (i in seq(1, length(g_slope))) {
m_coef <- c(m_intercept[1], m_slope)
g_coef <- c(g_intercept, g_slope[i])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "gRNA")
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/gRNA_hist_slope=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
}
seq(1, length(m_intercept))
