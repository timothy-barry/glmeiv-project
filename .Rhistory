m <- t(matrix(c(gt$param_id, gt$pi, gt$m_coef, gt$g_coef, gt$n)))
row.names(m) <- NULL
colnames(m) <- c("param_id", var_names, "n")
return(m)
}) %>% do.call(what = rbind, args = .) %>% as.data.frame()
all_gt
# a function to compute the coverage across all param_ids of a given variable
compute_statistics_for_variable <- function(variable, all_res, all_gt) {
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
n <-
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_reps_total),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_reps_total)) %>%
select(variable, param_id, gt_value, everything())
return(out)
}
variable
variable <- "pi"
all_res
all_gt
gt_var <- select(all_gt, param_id, !!variable)
gt_var
gt_var
all_gt
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
res_var
all_gt
all_res
variable
variable <- "m_perturbation"
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
gt_var
res_var
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id, method)
head(res_var)
n <-
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_reps_total),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_reps_total)) %>%
select(variable, param_id, gt_value, everything())
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id)
res_var
head(res_var)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_i, method)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id, method)
res_var
head(res_var)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
res_var
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher))
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method)
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n()))
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
select(variable, param_id, gt_value, everything())
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
select(variable, param_id, method, gt_value, everything())
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
select(variable, param_id, method, gt_value, everything())
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n()),
.groups = c("param_id", "method"))
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n()))
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method)
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n()))
?summarize
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
ungroup() %>% select(variable, param_id, method, gt_value, everything())
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n()),
.group = "drop") %>% select(variable, param_id, method, gt_value, everything())
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n()),
.group = "drop")
res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
ungroup() %>% select(variable, param_id, method, gt_value, everything())
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
ungroup() %>% select(variable, param_id, method, gt_value, everything())
out
compute_statistics_for_variable <- function(variable, all_res, all_gt) {
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id, method)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
ungroup() %>% select(variable, param_id, method, gt_value, everything())
return(out)
}
# finally, compute the statistics for each variable
varwise_stats <- lapply(var_names, function(variable)
compute_statistics_for_variable(variable, all_res, all_gt)) %>%
do.call(what = rbind, args = .)
varwise_stats_final <- left_join(x = varwise_stats, y = all_gt, by = "param_id")
varwise_stats_final
varwise_stats_final
View(varwise_stats_final)
# save result
saveRDS(object = varwise_stats_final, file = paste0(res_dir, "/combined_results.rds"))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
small_example <- if (is.na(args[2])) TRUE else as.logical(args[2])
# save result
saveRDS(object = varwise_stats_final, file = paste0(res_dir, "/combined_results.rds"))
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[ grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
var_names <- filter(all_res, rep_id == "1-1-1") %>% pull(variable) %>% unique()
varwise_stats_final <- left_join(x = varwise_stats, y = all_gt, by = "param_id")
# finally, compute the statistics for each variable
varwise_stats <- lapply(var_names, function(variable)
compute_statistics_for_variable(variable, all_res, all_gt)) %>%
do.call(what = rbind, args = .)
# save result
saveRDS(object = varwise_stats_final, file = paste0(res_dir, "/combined_results.rds"))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
small_example <- if (is.na(args[2])) TRUE else as.logical(args[2])
library(dplyr)
library(tidyr)
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[ grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
var_names <- filter(all_res, rep_id == "1-1-1") %>% pull(variable) %>% unique()
# load the ground truth
data_dir <- paste0(simulation_dir, "/data")
fs_load <- list.files(data_dir, full.names = TRUE)[grep(pattern = "ground_truth*", x = list.files(data_dir))]
all_gt <- lapply(fs_load, readRDS) %>% lapply(., function(gt) {
m <- t(matrix(c(gt$param_id, gt$pi, gt$m_coef, gt$g_coef, gt$n)))
row.names(m) <- NULL
colnames(m) <- c("param_id", var_names, "n")
return(m)
}) %>% do.call(what = rbind, args = .) %>% as.data.frame()
# recall the number of reps per row and number of partitions
n_reps_per_row <- if (small_example) 5 else 500
n_partitions <- 10
n_reps_total <- n_reps_per_row * n_partitions
# a function to compute the coverage across all param_ids of a given variable
compute_statistics_for_variable <- function(variable, all_res, all_gt) {
gt_var <- select(all_gt, param_id, !!variable)
res_var <- filter(all_res, variable == !!variable) %>% select(estimate, confint_lower, confint_higher, rep_id, param_id, method)
res_var$gt_value <- pull(gt_var, !!variable)[match(x = res_var$param_id, table = gt_var$param_id)]
out <- res_var %>% mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(param_id, method) %>% summarize(coverage = mean(covered),
mean_estimate = mean(estimate),
mean_lower_ci = mean(confint_lower),
mean_upper_ci = mean(confint_higher),
variable = variable,
gt_value = gt_value[1],
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n()),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n())) %>%
ungroup() %>% select(variable, param_id, method, gt_value, everything())
return(out)
}
# finally, compute the statistics for each variable
varwise_stats <- lapply(var_names, function(variable)
compute_statistics_for_variable(variable, all_res, all_gt)) %>%
do.call(what = rbind, args = .)
varwise_stats_final <- left_join(x = varwise_stats, y = all_gt, by = "param_id")
# save result
saveRDS(object = varwise_stats_final, file = paste0(res_dir, "/combined_results.rds"))
200 * 10
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_(Intercept)"] <- "m_intercept"
colnames(results)[colnames(results) == "g_(Intercept)"] <- "g_intercept"
summary_plot_for_var <- function(variable, method, results) {
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
free <- if (variable %in% c("g_perturbation", "m_(Intercept)")) "free_y" else "fixed"
form <- if (variable == "g_perturbation") "g_perturbation ~ m_intercept" else "m_intercept ~ g_perturbation"
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
p <- summary_plot_for_var("m_(Intercept)", "threshold", results)
p <- summary_plot_for_var("m_(Intercept)", "em", results)
variable <- "pi"
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
free <- if (variable %in% c("g_perturbation", "m_(Intercept)")) "free_y" else "fixed"
form <- if (variable == "g_perturbation") "g_perturbation ~ m_intercept" else "m_intercept ~ g_perturbation"
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
rgs <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_(Intercept)"] <- "m_intercept"
colnames(results)[colnames(results) == "g_(Intercept)"] <- "g_intercept"
method <- "em"
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
colnames(results)[colnames(results) == "m_(Intercept)"] <- "m_intercept"
colnames(results)[colnames(results) == "g_(Intercept)"] <- "g_intercept"
variable
method
results
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
free <- if (variable %in% c("g_perturbation", "m_(Intercept)")) "free_y" else "fixed"
form <- if (variable == "g_perturbation") "g_perturbation ~ m_intercept" else "m_intercept ~ g_perturbation"
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p1
p2
p_out <- grid.arrange(p1, p2, nrow = 1)
p_out
p_out + ggtitle("hi")
?grid.arrange
p_out <- grid.arrange(p1, p2, nrow = 1)
p_out
p_out <- grid.arrange(p1, p2, nrow = 1, top = "hi")
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle("Mean estimate and CI") +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle("CI coverage rate") +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1, top = "hi")
p_out <- grid.arrange(p1, p2, nrow = 1, top = paste0("Variable: ", variable, "; method: ", method))
p_out <- grid.arrange(p1, p2, nrow = 1, top = paste0("Variable: ", variable, ", method: ", method))
results$variable
unqiue(results$variable)
results %>% group_by(variable, method)
results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1])
pairs <- results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1])
paiars
pairs
pairs <- results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1], .groups)
pairs <- results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1], .groups = "")
pairs <- results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1], .groups = "drop")
pairs
seq(1, nrow(pairs))
p <- summary_plot_for_var(variable, results)
seq(1, nrow(pairs))
i <- 1
method <- pairs[i, "method"]
method <- pairs[i, "method"]
variable <- pairs[i, "variable"]
method
variable
method <- pairs[[i, "method"]]
variable <- pairs[[i, "variable"]]
method
variable
i
method <- pairs[[i, "method"]]
variable <- pairs[[i, "variable"]]
p <- make_summary(variable, method, results)
p <- make_summary_plot(variable, method, results)
make_summary_plot <- function(variable, method, results) {
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
free <- if (variable %in% c("g_perturbation", "m_(Intercept)")) "free_y" else "fixed"
form <- if (variable == "g_perturbation") "g_perturbation ~ m_intercept" else "m_intercept ~ g_perturbation"
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle("Mean estimate and CI") +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle("CI coverage rate") +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1, top = paste0("Variable: ", variable, ", method: ", method))
return(p_out)
}
make_summary_plot <- function(variable, method, results) {
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
free <- if (variable %in% c("g_perturbation", "m_(Intercept)")) "free_y" else "fixed"
form <- if (variable == "g_perturbation") "g_perturbation ~ m_intercept" else "m_intercept ~ g_perturbation"
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle("Mean estimate and CI") +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle("CI coverage rate") +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1, top = paste0("Variable: ", variable, ", method: ", method))
return(p_out)
}
pairs <- results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1], .groups = "drop")
method <- pairs[[i, "method"]]
variable <- pairs[[i, "variable"]]
p <- make_summary_plot(variable, method, results)
p
figure_dir
f_name <- paste0(figure_dir, "/", method, variable, "_plot.pdf")
f_name
f_name <- paste0(figure_dir, "/", method, "-", variable, "_plot.pdf")
f_name
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
# create plot for each variable
for (i in seq(1, nrow(pairs))) {
method <- pairs[[i, "method"]]
variable <- pairs[[i, "variable"]]
p <- make_summary_plot(variable, method, results)
f_name <- paste0(figure_dir, "/", method, "-", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
