facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle("Mean estimate and CI") +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle("CI coverage rate") +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1, top = paste0("Variable: ", variable, ", method: ", method))
return(p_out)
}
make_summary_plot <- function(variable, method, results) {
res_var <- filter(results, variable == !!variable & method == !!method)
to_plot <- res_var %>% mutate(n = factor(n),
m_intercept = paste("m-int=", m_intercept),
g_perturbation = paste("g-pert=", g_perturbation))
free <- if (variable %in% c("g_perturbation", "m_(Intercept)")) "free_y" else "fixed"
form <- if (variable == "g_perturbation") "g_perturbation ~ m_intercept" else "m_intercept ~ g_perturbation"
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(form, labeller = label_context, scales = free) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle("Mean estimate and CI") +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_grid(form, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle("CI coverage rate") +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.90), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1, top = paste0("Variable: ", variable, ", method: ", method))
return(p_out)
}
pairs <- results %>% group_by(variable, method) %>% summarize(variable = variable[1], method = method[1], .groups = "drop")
method <- pairs[[i, "method"]]
variable <- pairs[[i, "variable"]]
p <- make_summary_plot(variable, method, results)
p
figure_dir
f_name <- paste0(figure_dir, "/", method, variable, "_plot.pdf")
f_name
f_name <- paste0(figure_dir, "/", method, "-", variable, "_plot.pdf")
f_name
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
# create plot for each variable
for (i in seq(1, nrow(pairs))) {
method <- pairs[[i, "method"]]
variable <- pairs[[i, "variable"]]
p <- make_summary_plot(variable, method, results)
f_name <- paste0(figure_dir, "/", method, "-", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
m_fam <- poisson()
g_fam <- poisson()
m_coef_names <- c("m_intercept", "m_perturbation")
g_coef_names <- c("g_intercept", "g_perturbation")
fixed_params <- c(m_intercept = 2,
g_intercept = 1,
n = 1000)
varying_params <- expand.grid(pi = seq(0.1, 0.5, 0.1),
m_perturbation = seq(0, -1, -0.1),
g_perturbation = seq(0, 1, 0.1))
covariate_sampler <- NULL
n_outer_reps <- 10
n_inner_reps <- 200
ci_coverage <- 0.9
# finally, define the offsite data, results, and logs dirs
drl <- c("data", "results", "logs")
data_results_logs <- setNames(paste0(simulation_dir, "/", drl), drl)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts" else args[2]
small_example <- if (is.na(args[3])) TRUE else as.logical(args[3])
# source the param file from the scripts_dir
source(paste0(scripts_dir, "/param_file.R"))
# create simulation dir, if it does not exist
if (!dir.exists(simulation_dir)) dir.create(simulation_dir, recursive = TRUE)
for (dir in data_results_logs) {
# create (if necessary)
if (!dir.exists(dir)) dir.create(dir)
# delete contents
file.remove(list.files(dir, full.names = TRUE))
}
library(stats)
library(dplyr)
library(glmeiv)
library(future)
library(furrr)
param_id <- rep(seq(1, nrow(varying_params)), each = n_outer_reps)
partition_id <- rep(seq(1, n_outer_reps), times = nrow(varying_params))
g <- varying_params[param_id, ] %>%
mutate(param_id = param_id,
partition_id = partition_id,
run_id = paste0(param_id, "-", partition_id))
row.names(g) <- NULL
saveRDS(object = g, file = paste0(data_results_logs[["data"]], "/parameter_df.rds"))
if (small_example) g <- slice(g, seq(1, 20))
cat(nrow(g))
# set seed for generating covariate matrices
set.seed(4)
# create covariate matrices
if (!no_covariates) { # if covariates are present
if (n_fixed) {
# generate a single data frame
covariate_matrix <- lapply(X = covariate_sampler,
FUN = function(f) f(fixed_params[["n"]])) %>% as.data.frame
saveRDS(covariate_matrix, file = paste0(data_results_logs[["data"]], "/covariate_matrix_", fixed_params[["n"]], ".rds"))
} else {
# generate a data frame for each level of n
n_levels <- unique(g$n)
covariate_matrices <- lapply(n_levels, function(curr_n) {
curr_m <- lapply(X = covariate_sampler,
FUN = function(f) f(curr_n)) %>% as.data.frame
saveRDS(object = curr_m, file = paste0(data_results_logs[["data"]], "/covariate_matrix_", curr_n, ".rds"))
return(curr_m)
})
}
}
# if small example, use only 5 inner reps; generate data in parallel
if (small_example) n_inner_reps <- 5
plan(multicore(workers = 40))
suppressWarnings(future_map(.x = unique(g$param_id), .f = function(i) {
# set seed within each param setting
set.seed(16)
curr_param_df <- filter(g, param_id == i)
varying_param_row <- curr_param_df[1,]
# first, the regression coefficients
curr_m_coef <- get_param_vector(fixed_params, varying_param_row, m_coef_names)
curr_g_coef <- get_param_vector(fixed_params, varying_param_row, g_coef_names)
# next, n and pi
curr_n <- if (n_fixed) fixed_params[["n"]] else varying_param_row[["n"]]
curr_pi <- if (pi_fixed) fixed_params[["pi"]] else varying_param_row[["pi"]]
# Finally, the covariate matrix
if (no_covariates) {
curr_covariate_matrix <- NULL
} else {
if (n_fixed) {
curr_covariate_matrix <- covariate_matrix
} else {
curr_covariate_matrix <- covariate_matrices[[which(curr_n == n_levels)]]
}
}
# Generate the data
data <- replicate(n_inner_reps * n_outer_reps, generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = curr_m_coef, g_coef = curr_g_coef,
pi = curr_pi, covariate_matrix = curr_covariate_matrix, n = curr_n), simplify = FALSE)
v <- seq(0, n_inner_reps * n_outer_reps, n_inner_reps)
for (j in seq(1, n_outer_reps)) {
run_id <- curr_param_df$run_id[j]
saveRDS(data[seq(v[j] + 1, v[j + 1])], file = paste0(data_results_logs[["data"]], "/data_", run_id, ".rds"))
}
ground_truth <- list(m_coef = curr_m_coef, g_coef = curr_g_coef, pi = curr_pi, m_fam = m_fam, g_fam = g_fam, param_id = i, n = curr_n)
saveRDS(ground_truth, file = paste0(data_results_logs[["data"]], "/ground_truth_", i, ".rds"))
})) %>% invisible()
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts" else args[2]
run_id <- if (is.na(args[3])) 1 else as.integer(args[3])
# Load required packages
library(magrittr)
library(glmeiv)
# source the param file
source(paste0(scripts_dir, "/param_file.R"))
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
# Load data, ground truth, and covariate matrix for current run_id
curr_row <- g[run_id,]
sink(file = paste0(data_results_logs[["logs"]], "/log_", curr_row$run_id, ".Rout"))
data <- readRDS(file = paste0(data_results_logs[["data"]], "/data_", curr_row$run_id, ".rds"))
# load the covariate matrix
curr_n <- if (n_fixed) fixed_params[["n"]] else curr_row[["n"]]
curr_covariate_matrix <- readRDS(paste0(data_results_logs[["data"]], "/covariate_matrix_", curr_n, ".rds"))
curr_n
closeAllConnections()
curr_n
# load the covariate matrix
curr_n <- if (n_fixed) fixed_params[["n"]] else curr_row[["n"]]
curr_covariate_matrix <- readRDS(paste0(data_results_logs[["data"]], "/covariate_matrix_", curr_n, ".rds"))
curr_covariate_matrix <- if (no_covariates) NULL else readRDS(paste0(data_results_logs[["data"]], "/covariate_matrix_", curr_n, ".rds"))
curr_covariate_matrix
g_coefs <- get_param_vector(fixed_params, curr_row, g_coef_names)
m_coefs <- get_param_vector(fixed_params, curr_row, g_coef_names)
# run the em length(data) times
result_list <- lapply(X = seq(1, length(data)), FUN = function(i) {
print(paste0("Running rep ", i, " of ", length(data)))
curr_data <- data[[i]]
# first, obtain the optimal threshold (just ignore covariates -- thresholding method cannot really handle this)
p_hat <- threshold_counts_no_covariates(g_intercept = g_coefs[["g_intercept"]],
g_pert = g_coefs[["g_perturbation"]],
g = curr_data$g,
g_fam = g_fam,
pi = if (pi_fixed) fixed_params[["pi"]] else curr_row[["pi"]])
em_fit <- run_glmeiv_known_p(m = curr_data$m, g = curr_data$g,
m_fam = m_fam, g_fam = g_fam,
covariate_matrix = curr_covariate_matrix, p = p_hat, n_runs = 5,
max_it = 100, alpha = ci_coverage) %>% dplyr::mutate(method = "em")
thresh_fit <- run_thresholding_method(m = curr_data$m,
m_fam = m_fam,
covariate_matrix = curr_covariate_matrix,
p_hat = p_hat,
alpha = ci_coverage) %>% dplyr::mutate(method = "threshold")
out <- rbind(em_fit, thresh_fit) %>% dplyr::mutate(rep_id = paste0(curr_row$run_id, "-", i),
param_id = curr_row$param_id)
return(out)
})
# combine results into a data frame and save in results dir
result_df <- do.call(what = rbind, args = result_list)
saveRDS(result_df, paste0(data_results_logs[["results"]], "/result_", curr_row$run_id, ".rds"))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts" else args[2]
run_id <- if (is.na(args[3])) 1 else as.integer(args[3])
# Load required packages
library(magrittr)
library(glmeiv)
# source the param file
source(paste0(scripts_dir, "/param_file.R"))
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
varying_params <- expand.grid(pi = seq(0.1, 0.5, 0.1),
m_perturbation = seq(0, -1, -0.1),
g_perturbation = seq(0, 1, 0.1))
nrow(varying_params)
data_results_logs
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts/" else args[2]
library(dplyr)
library(tidyr)
# load the set of parameters
source(paste0(scripts_dir, "/param_file.R"))
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
# for the varying parameters, compute the summary statistics
x <- all_res %>% filter(variable %in% var_names) %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(variable, param_id, method) %>%
summarize(
n_success_ci = sum(!is.na(confint_lower)),
coverage = mean(covered, na.rm = TRUE),
mean_estimate = mean(estimate, na.rm = TRUE),
mean_lower_ci = mean(confint_lower, na.rm = TRUE),
mean_upper_ci = mean(confint_higher, na.rm = TRUE),
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
gt_value = gt_value[1]) %>% ungroup()
data_results_logs[["results"]]
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts/" else args[2]
library(dplyr)
library(tidyr)
# load the set of parameters
source(paste0(scripts_dir, "/param_file.R"))
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
# for the varying parameters, compute the summary statistics
x <- all_res %>% filter(variable %in% var_names) %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(variable, param_id, method) %>%
summarize(
n_success_ci = sum(!is.na(confint_lower)),
coverage = mean(covered, na.rm = TRUE),
mean_estimate = mean(estimate, na.rm = TRUE),
mean_lower_ci = mean(confint_lower, na.rm = TRUE),
mean_upper_ci = mean(confint_higher, na.rm = TRUE),
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
gt_value = gt_value[1]) %>% ungroup()
x
nrow(x)
x
all_res
nrow(all_res)
head(all_res)
all_res %>% filter(variable %in% var_names)
var_names
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts/" else args[2]
library(dplyr)
library(tidyr)
# load the set of parameters
source(paste0(scripts_dir, "/param_file.R"))
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
# for the varying parameters, compute the summary statistics
x <- all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(variable, param_id, method) %>%
summarize(
n_success_ci = sum(!is.na(confint_lower)),
coverage = mean(covered, na.rm = TRUE),
mean_estimate = mean(estimate, na.rm = TRUE),
mean_lower_ci = mean(confint_lower, na.rm = TRUE),
mean_upper_ci = mean(confint_higher, na.rm = TRUE),
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
gt_value = gt_value[1]) %>% ungroup()
x
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts/" else args[2]
library(dplyr)
library(tidyr)
# load the set of parameters
source(paste0(scripts_dir, "/param_file.R"))
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
head(gt_long)
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
head(res_dir)
fs
all_res
gt_long
head(all_res)
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(gt_value_full = if(is.na(gt_value)) fixed_params[[variable]] else gt_value)
fixed_params[[variable]]
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher))
var_names <- colnames(varying_params)
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher))
var_names <- colnames(varying_params)
var_names
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
g
head(g)
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
gt_long
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(variable, param_id, method)
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher))
all_res
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
fixed_params
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>% select(gt_value, variable)
var_names <- colnames(varying_params)
var_names
head(varying_params)
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
head(g)
g
fixed_params
fixed_param %in% names(fixed_params)
fixed_param in names(fixed_params)
fixed_param
names(fixed_params)
for (fixed_param in names(fixed_params)) print(fixed_param)
for (fixed_param in names(fixed_params)) g[[fixed_param]] <- fixed_params[[fixed_param]]
head(g)
g %>% select(-partition_id, -run_id, -ok)
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
head(gt_long)
head(gt_long, 40)
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
# for the varying parameters, compute the summary statistics
x <- all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(variable, param_id, method) %>%
summarize(
n_success_ci = sum(!is.na(confint_lower)),
coverage = mean(covered, na.rm = TRUE),
mean_estimate = mean(estimate, na.rm = TRUE),
mean_lower_ci = mean(confint_lower, na.rm = TRUE),
mean_upper_ci = mean(confint_higher, na.rm = TRUE),
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
gt_value = gt_value[1]) %>% ungroup()
x
View(x)
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
gt_long
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable"))
gt_long
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts/" else args[2]
library(dplyr)
library(tidyr)
# load the set of parameters
source(paste0(scripts_dir, "/param_file.R"))
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
for (fixed_param in names(fixed_params)) g[[fixed_param]] <- fixed_params[[fixed_param]]
fixed_param
fixed_params
for (fixed_param in names(fixed_params)) g[[fixed_param]] <- fixed_params[[fixed_param]]
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
gt_long
head(gt_long)
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
head(all_res)
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
all_res
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
scripts_dir <- if (is.na(args[2])) "~/Box/glm-eiv/glmeiv_scripts/" else args[2]
library(dplyr)
library(tidyr)
# load the set of parameters
source(paste0(scripts_dir, "/param_file.R"))
var_names <- colnames(varying_params)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
for (fixed_param in names(fixed_params)) g[[fixed_param]] <- fixed_params[[fixed_param]]
gt_long <- g %>% select(-partition_id, -run_id) %>% distinct() %>%
pivot_longer(cols = -param_id, names_to = "variable", values_to = "gt_value")
# load the results
res_dir <- paste0(simulation_dir, "/results")
fs <- list.files(res_dir, full.names = TRUE)[grep(pattern = "^result_*", x = list.files(res_dir))]
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
head(all_res)
all_res$variable == "hi"
gt_long
all_res$variable[all_res$variable == "m_(Intercept)"] <- "m_intercept"
all_res$variable[all_res$variable == "g_(Intercept)"] <- "g_intercept"
head(all_res)
all_res <- lapply(fs, readRDS) %>% do.call(what = rbind, args = .)
all_res
all_res$variable[all_res$variable == "m_(Intercept)"] <- "m_intercept"
all_res$variable[all_res$variable == "g_(Intercept)"] <- "g_intercept"
all_res
# for the varying parameters, compute the summary statistics
x <- all_res %>% left_join(x = ., y = gt_long, by = c("param_id", "variable")) %>%
mutate(covered = (gt_value >= confint_lower & gt_value <= confint_higher)) %>%
group_by(variable, param_id, method) %>%
summarize(
n_success_ci = sum(!is.na(confint_lower)),
coverage = mean(covered, na.rm = TRUE),
mean_estimate = mean(estimate, na.rm = TRUE),
mean_lower_ci = mean(confint_lower, na.rm = TRUE),
mean_upper_ci = mean(confint_higher, na.rm = TRUE),
coverage_lower_ci = coverage - 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
coverage_upper_ci = coverage + 1.96 * sqrt(coverage * (1-coverage)/n_success_ci),
gt_value = gt_value[1]) %>% ungroup()
x
View(x)
