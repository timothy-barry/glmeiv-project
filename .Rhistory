f_name <- paste0(figure_dir, "/", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
run_id <- if (is.na(args[2])) 1 else as.integer(args[2])
# Load required packages
library(magrittr)
library(glmeiv)
# set file paths and load parameter grid; sik results
drl <- c("data", "results", "logs")
data_results_logs <- setNames(paste0(simulation_dir, "/", drl), drl)
g <- readRDS(paste0(data_results_logs[["data"]], "/parameter_df.rds"))
# Load data, ground truth, and covariate matrix for current run_id
curr_row <- g[run_id,]
sink(file = paste0(data_results_logs[["logs"]], "/log_", curr_row$run_id, ".Rout"))
data <- readRDS(file = paste0(data_results_logs[["data"]], "/data_", curr_row$run_id, ".rds"))
ground_truth <- readRDS(file = paste0(data_results_logs[["data"]], "/ground_truth_", curr_row$param_id, ".rds"))
covariate_matrix <- readRDS(file = paste0(data_results_logs[["data"]], "/covariate_matrix_", curr_row$dataset_id, ".rds"))
covariate_matrix
closeAllConnections()
# run the em length(data) times
result_list <- lapply(X = seq(1, length(data)), FUN = function(i) {
print(paste0("Running rep ", i, " of ", length(data)))
curr_data <- data[[i]]
em_fit <- run_glmeiv_known_p(m = curr_data$m, g = curr_data$g,
m_fam = ground_truth$m_fam, g_fam = ground_truth$g_fam,
covariate_matrix = covariate_matrix, p = curr_data$p, n_runs = 5) %>%
dplyr::mutate(rep_id = paste0(curr_row$run_id, "-", i), param_id = curr_row$param_id)
return(em_fit)
})
result_list
# combine results into a data frame and save in results dir
result_df <- do.call(what = rbind, args = result_list)
saveRDS(result_df, paste0(data_results_logs[["results"]], "/result_", curr_row$run_id, ".rds"))
# close the sink
closeAllConnections()
run_glmeiv_known_p
library(glmeiv)
# Plot histograms
set.seed(4)
m_intercept <- c(0, 1, 2, 3)
m_slope <- -2
g_intercept <- -2
g_slope <- c(1, 2, 3, 4)
pi <- 0.25
covariate_matrix <- NULL
n <- 10000
m_intercept <- c(0, 1, 2, 3)
m_slope <- -2
g_intercept <- -2
g_slope <- c(1, 2, 3, 4)
pi <- 0.25
m_fam <- poisson()
g_fam <- poisson()
covariate_matrix <- NULL
n <- 10000
m_fam
g_fam
m_coef
m_coef <- c(m_intercept[i], m_slope)
i <- 1
m_coef <- c(m_intercept[i], m_slope)
m_coef
m_coef <- c(m_intercept[i], m_slope)
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
# Plot histograms
library(glmeiv)
m_coef <- c(m_intercept[i], m_slope)
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
dat
plot_count_distribution(dat, "mRNA")
p <- plot_count_distribution(dat, "mRNA")
p
i <- 2
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
p
i <- 3
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
p
library(ggplot2)
m_intercept[i]
paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept_", m_intercept[i])
paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept=", m_intercept[i]
paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept=", m_intercept[i])
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/", "mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
m_coef <- c(m_intercept[1], m_slope)
g_coef <- c(g_intercept, g_slope[i])
g_coef
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
p <- plot_count_distribution(dat, "gRNA")
p
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
for (i in seq(1, length(m_intercept))) {
m_coef <- c(m_intercept[i], m_slope)
g_coef <- c(g_intercept, g_slope[1])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "mRNA")
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/mRNA_hist_intercept=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
}
for (i in seq(1, length(g_slope))) {
m_coef <- c(m_intercept[1], m_slope)
g_coef <- c(g_intercept, g_slope[i])
dat <- generate_data_from_model(m_fam = m_fam, g_fam = g_fam,
m_coef = m_coef, g_coef = g_coef,
pi = pi, covariate_matrix = covariate_matrix, n = n)
p <- plot_count_distribution(dat, "gRNA")
ggsave(filename = paste0("~/Box/glm-eiv/simulation_dir/figures/sim2/gRNA_hist_slope=", m_intercept[i], ".pdf"), plot = p, device = "pdf", scale = 1, width = 4, height = 3)
}
seq(1, length(m_intercept))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(m_pert ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
results
tail(results)
tail(results$n)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable)
to_plot <- res_var %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(m_pert ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
unique(results$variable)
variable <- "pi"
p <- summary_plot_for_var(variable, results)
variable
results
results
res_var <- filter(results, variable == !!variable)
res_var
to_plot <- res_var %>% mutate(n = factor(n))
head(to_plot)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
variable <- "m_perturbation"
res_var <- filter(results, variable == !!variable)
res_var
to_plot <- res_var %>% filter(n < 100000) %>% mutate(n = factor(n))
nrow(to_plot)
to_plot
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(m_pert ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point()
p1
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid('m_(Intercept)' ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point()
p1
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(m_(Intercept) ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point()
p1
vars('m_(Intercept)')
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(vars('m_(Intercept)') ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw()
p1
ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(m_(Intercept) ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw()
vars(m_(Intercept))
ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(vars(m_(Intercept)) ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw()
ggplot(data = to_plot, aes(x = n, y = mean_estimate))
ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(vars(m_(Intercept)) ~ g_pert, labeller = label_context, scales = "free_y")
to_plot
colnames(res_var)
colnames(res_var) == "m_(Intercept)"
res_var[colnames(res_var) == "m_(Intercept)"]
res_var[colnames(res_var) == "m_(Intercept)"] <- "m_intercept"
res_var <- filter(results, variable == !!variable)
res_var[colnames(res_var) == "m_(Intercept)"] <- "m_intercept"
to_plot <- res_var %>% filter(n < 100000) %>% mutate(n = factor(n))
p1 <- ggplot(data = to_plot, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point()
p1
head(to_plot)
res_var <- filter(results, variable == !!variable)
res_var[colnames(res_var) == "m_(Intercept)"] <- "m_intercept"
head(results)
res_var <- filter(results, variable == !!variable) %>% rename("m_(Intercept)" = "m_intercept")
res_var <- filter(results, variable == !!variable) %>% rename("m_intercept" = "m_(Intercept)")
res_var
to_plot <- res_var %>% filter(n < 100000) %>% mutate(n = factor(n))
res_var <- filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n < 100000) %>% mutate(n = factor(n))
ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point()
ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red")
ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw()
ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable))
ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI")
ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), labeller = label_value, col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p1 <- ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_value, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
o_1
p1
p2 <- ggplot(data = to_plot, aes(x = n, y = coverage)) +
facet_wrap(. ~ m_pert + g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p2
p2 <- ggplot(data = res_var, aes(x = n, y = coverage)) +
facet_wrap(m_intercept ~ g_pert, labeller = label_context) +
geom_point() + theme_bw()
p2
p2 <- ggplot(data = res_var, aes(x = n, y = coverage)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability")
p2
ggplot(data = res_var, aes(x = n, y = coverage)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
P_OUT
p_out
# create plot for each variable
for (variable in unique(results$variable)) {
p <- summary_plot_for_var(variable, results)
f_name <- paste0(figure_dir, "/", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n < 100000) %>% mutate(n = factor(n))
p1 <- ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_value, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = res_var, aes(x = n, y = coverage)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
# create plot for each variable
for (variable in unique(results$variable)) {
p <- summary_plot_for_var(variable, results)
f_name <- paste0(figure_dir, "/", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
for (variable in unique(results$variable)) {
p <- summary_plot_for_var(variable, results)
f_name <- paste0(figure_dir, "/sim2/", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
p3 <- res_var_big %>% filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n == 100000)
res_var_big <- results %>% filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n == 100000)
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
results
res_var_big <-filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n == 100000)
variable <- "pi"
res_var_big <-filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n == 100000)
res_var_big
res_var_big
ggplot(data = res_var_big, aes(x = n, y = mean_estimate)) +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
# obtain all args
args <- commandArgs(trailingOnly = TRUE)
simulation_dir <- if (is.na(args[1])) "~/Box/glm-eiv/simulation_dir" else args[1]
results <- readRDS(paste0(simulation_dir, "/results/combined_results.rds"))
figure_dir <- paste0(simulation_dir, "/figures")
if (!dir.exists(figure_dir)) dir.create(figure_dir)
library(ggplot2)
library(dplyr)
library(gridExtra)
colnames(results)[colnames(results) == "m_perturbation"] <- "m_pert"
colnames(results)[colnames(results) == "g_perturbation"] <- "g_pert"
summary_plot_for_var <- function(variable, results) {
res_var <- filter(results, variable == !!variable) %>%
rename("m_intercept" = "m_(Intercept)") %>%
filter(n < 100000) %>% mutate(n = factor(n))
p1 <- ggplot(data = res_var, aes(x = n, y = mean_estimate)) +
facet_grid(m_intercept ~ g_pert, labeller = label_value, scales = "free_y") +
geom_hline(mapping = aes(yintercept = gt_value), col = "blue") +
geom_point() + geom_errorbar(aes(ymin = mean_lower_ci, ymax = mean_upper_ci, width = 0.2), col = "red") +
theme_bw() +
ggtitle(paste0("Mean est. and CI for ", variable)) +
ylab("Mean estimate and CI") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = res_var, aes(x = n, y = coverage)) +
facet_grid(m_intercept ~ g_pert, labeller = label_context) +
geom_point() + theme_bw() +
ggtitle(paste0("CI coverage rate for ", variable)) +
ylab("Coverage probability") +
geom_hline(mapping = aes(yintercept = 0.95), col = "blue") +
geom_errorbar(aes(ymin = coverage_lower_ci, ymax = coverage_upper_ci, width = 0.2), col = "red") +
theme(plot.title = element_text(hjust = 0.5))
p_out <- grid.arrange(p1, p2, nrow = 1)
return(p_out)
}
# create plot for each variable
for (variable in unique(results$variable)) {
p <- summary_plot_for_var(variable, results)
f_name <- paste0(figure_dir, "/sim2/", variable, "_plot.pdf")
ggsave(filename = f_name, plot = p, device = "pdf", scale = 1, width = 8, height = 4.5)
}
filter(results, n == 100000)
filter(results, n == 100000) %>% select('m_(Intercept)', g_pert)
filter(results, n == 100000) %>% select(variable, gt_value, coverage, mean_estimate, 'm_(Intercept)', g_pert)
results$g_pert %>% unique()
